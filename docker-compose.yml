version: "3.8"

services:
  # MySQL数据库
  # mysql:
  #   image: mysql:8.0
  #   container_name: ai-qa-mysql
  #   environment:
  #     MYSQL_ROOT_PASSWORD: root123
  #     MYSQL_DATABASE: ai_qa_system
  #     MYSQL_USER: aiqa
  #     MYSQL_PASSWORD: aiqa123
  #   ports:
  #     - "3306:3306"
  #   volumes:
  #     - mysql_data:/var/lib/mysql
  #     - ./backend-services/user-service/src/main/resources/sql:/docker-entrypoint-initdb.d
  #   networks:
  #     - ai-qa-network
  #   healthcheck:
  #     test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
  #     timeout: 20s
  #     retries: 10

  # 用户服务
  user-service:
    image: liugang3639/ai-qa-user-service:latest
    # build:
    #   context: ./backend-services/user-service
    #   dockerfile: Dockerfile
    container_name: ai-qa-user-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:mysql://liug-aiqasystemdb.cjkwkoiq2pgc.us-east-2.rds.amazonaws.com:3306/ai_qa_system?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: zaq12wsx
    ports:
      - "8081:8081"
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - ai-qa-network
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3

  # 问答服务
  qa-service:
    image: liugang3639/ai-qa-qa-service:latest
    # build:
    #   context: ./backend-services/qa-service
    #   dockerfile: Dockerfile
    container_name: ai-qa-qa-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:mysql://liug-aiqasystemdb.cjkwkoiq2pgc.us-east-2.rds.amazonaws.com:3306/ai_qa_system?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: zaq12wsx
      GEMINI_API_KEY: ${GEMINI_API_KEY:AIzaSyB5nVaGOcJYSsxwmPVe1kVYZxY2Dl504Zg}
      USER_SERVICE_URL: http://user-service:8081
    ports:
      - "8082:8082"
    # depends_on:
    #   mysql:
    #     condition: service_healthy
    #   user-service:
    #     condition: service_healthy
    networks:
      - ai-qa-network
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3

  # API网关
  api-gateway:
    image: liugang3639/ai-qa-api-gateway:latest
    # build:
    #   context: ./backend-services/api-gateway
    #   dockerfile: Dockerfile
    container_name: ai-qa-api-gateway
    environment:
      SPRING_PROFILES_ACTIVE: docker
      USER_SERVICE_URL: http://user-service:8081
      QA_SERVICE_URL: http://qa-service:8082
    ports:
      - "8080:8080"
    # depends_on:
    #   user-service:
    #     condition: service_healthy
    #   qa-service:
    #     condition: service_healthy
    networks:
      - ai-qa-network
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3

  # 前端应用
  frontend:
    image: liugang3639/ai-qa-frontend:latest
    # build:
    #   context: ./frontend
    #   dockerfile: Dockerfile
    container_name: ai-qa-frontend
    environment:
      NEXT_PUBLIC_API_BASE_URL: http://localhost:8080
    ports:
      - "3000:3000"
    # depends_on:
    #   - api-gateway
    networks:
      - ai-qa-network

  # Redis缓存 (可选)
  redis:
    image: redis:7-alpine
    container_name: ai-qa-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ai-qa-network
    command: redis-server --appendonly yes

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local

networks:
  ai-qa-network:
    driver: bridge
